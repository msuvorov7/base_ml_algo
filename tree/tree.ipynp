{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "df9de4f8",
   "metadata": {},
   "source": [
    "# Import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a8efa09",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3e46be2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import make_blobs, make_circles, make_regression, make_moons\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3896cc4",
   "metadata": {},
   "source": [
    "# Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "150f4595",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Criterion():\n",
    "    \n",
    "    def __init__(self):\n",
    "        pass\n",
    "    \n",
    "    def get_predict_val(self, target: np.array):\n",
    "        raise NotImplementedError\n",
    "        \n",
    "    def get_score(self, tatget: np.array):\n",
    "        raise NotImplementedError\n",
    "        \n",
    "    def get_best_split(self, feature: np.array, target: np.array) -> tuple([float, float]):\n",
    "        indixes = feature.argsort()\n",
    "        target_str = target[indixes]\n",
    "        N = len(target_str)\n",
    "        \n",
    "        Q_best = -np.inf\n",
    "        i_best = 0\n",
    "        H = self.get_score(target_str)\n",
    "        \n",
    "        for i in range(1, N): # without max and min value\n",
    "            H_lhs = self.get_score(target_str[:i])\n",
    "            H_rhs = self.get_score(target_str[i:])\n",
    "            Q = H - i / N * H_lhs - (N-i) / N * H_rhs\n",
    "            \n",
    "            if Q > Q_best:\n",
    "                Q_best = Q\n",
    "                i_best = i\n",
    "                \n",
    "        threshold = (feature[i_best] + feature[i_best-1]) / 2\n",
    "        return threshold, Q_best"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "143cda50",
   "metadata": {},
   "outputs": [],
   "source": [
    "class GiniCriterion(Criterion):\n",
    "    \n",
    "    def __init__(self, n_classes: int):\n",
    "        self.n_classes = n_classes\n",
    "        \n",
    "    def get_predict_val(self, target: np.array) -> np.array:\n",
    "        return np.bincount(target, minlength=self.n_classes) / len(target)\n",
    "    \n",
    "    def get_score(self, target: np.array) -> np.array:\n",
    "        p = self.get_predict_val(target)\n",
    "        return 1 - np.sum(p*p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "791859c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "class EntropyCriterion(Criterion):\n",
    "    \n",
    "    EPS = 1e-8\n",
    "    \n",
    "    def __init__(self, n_classes: int):\n",
    "        self.n_classes = n_classes\n",
    "        \n",
    "    def get_predict_val(self, target: np.array) -> np.array:\n",
    "        return np.bincount(target, minlength=self.n_classes) / len(target)\n",
    "    \n",
    "    def get_score(self, target: np.array) -> np.array:\n",
    "        p = self.get_predict_val(target)\n",
    "        return - np.sum(p * np.log(p + self.EPS))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "37794d18",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MSECriterion(Criterion):\n",
    "    \n",
    "    def __init__(self, n_classes: int):\n",
    "        self.n_classes = n_classes\n",
    "        \n",
    "    def get_predict_val(self, target: np.array) -> np.array:\n",
    "        return np.mean(target)\n",
    "    \n",
    "    def get_score(self, target: np.array) -> np.array:\n",
    "        mean = self.get_predict_val(target)\n",
    "        return np.mean(np.square(target - mean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "96ab61e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "class TreeNode():\n",
    "    \n",
    "    \n",
    "    def __init__(self, criterion: Criterion, depth: int = 0):\n",
    "        self.criterion = criterion\n",
    "        self.lhs_node = None\n",
    "        self.rhs_node = None\n",
    "        self.depth = depth\n",
    "        \n",
    "        self.feature = None\n",
    "        self.threshold = None\n",
    "        self.predict_val = None\n",
    "        \n",
    "    def is_terminal(self):\n",
    "        return (self.lhs_node is None) and (self.rhs_node is None)\n",
    "    \n",
    "    def get_best_feature(self, x: np.array, y: np.array) -> tuple([int, float, float]):\n",
    "        Q_best = -np.inf\n",
    "        threshold_best = 0\n",
    "        feature_best = 0\n",
    "        \n",
    "        \n",
    "        for feature in range(x.shape[1]):\n",
    "            threshold, Q = self.criterion.get_best_split(x[:, feature], y)\n",
    "            if Q > Q_best:\n",
    "                Q_best = Q\n",
    "                feature_best = feature\n",
    "                threshold_best = threshold\n",
    "                \n",
    "        self.feature = feature_best\n",
    "        self.threshold = threshold_best\n",
    "        return feature_best, threshold_best, Q_best\n",
    "        \n",
    "    def get_indicator_mask(self, x, threshold) -> np.array:\n",
    "        return x <= threshold\n",
    "    \n",
    "    def split(self, x, y):\n",
    "        feature, threshold, q = self.get_best_feature(x, y)\n",
    "        rhs_mask = self.get_indicator_mask(x[:, feature], threshold)\n",
    "                \n",
    "        lhs_node = TreeNode(self.criterion, self.depth+1)\n",
    "        lhs_node.predict_val = self.criterion.get_predict_val(y[rhs_mask])\n",
    "        \n",
    "        rhs_node = TreeNode(self.criterion, self.depth+1)\n",
    "        rhs_node.predict_val = self.criterion.get_predict_val(y[~rhs_mask])\n",
    "        return rhs_mask, lhs_node, rhs_node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c4596dd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Tree:\n",
    "    \n",
    "    def __init__(self, criterion: Criterion, max_depth: int = None, min_leaf_size: int = None):\n",
    "        self.max_depth = max_depth\n",
    "        self.min_leaf_size = min_leaf_size\n",
    "        self.criterion = criterion\n",
    "        self.root = TreeNode(self.criterion, 1)\n",
    "        \n",
    "    def insert(self, node: TreeNode, X: np.array, y: np.array):\n",
    "        if node is None:\n",
    "            raise NotImplementedError\n",
    "            \n",
    "        if np.unique(y).shape[0] <= 1:\n",
    "            return None\n",
    "        \n",
    "        if self.max_depth is not None and node.depth >= self.max_depth:\n",
    "            return None\n",
    "        \n",
    "        if self.min_leaf_size is not None and self.min_leaf_size > len(y) :\n",
    "            return None\n",
    "        \n",
    "        mask, lhs_node, rhs_node = node.split(X, y)\n",
    "        \n",
    "        node.lhs_node = lhs_node\n",
    "        self.insert(node.lhs_node, X[mask], y[mask])\n",
    "        \n",
    "        node.rhs_node = rhs_node\n",
    "        self.insert(node.rhs_node, X[~mask], y[~mask])\n",
    "        \n",
    "    def build_tree(self, X, y):\n",
    "        self.insert(self.root, X, y)\n",
    "        \n",
    "    def _predict(self, node, X, preds, inds):\n",
    "        if node.is_terminal():\n",
    "            preds[inds] = node.predict_val\n",
    "        else:\n",
    "            mask = node.get_indicator_mask(X[:, node.feature], node.threshold)\n",
    "            self._predict(node.lhs_node, X[mask], preds, inds[mask])\n",
    "            self._predict(node.rhs_node, X[~mask], preds, inds[~mask])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "378decfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ClassificationTree(Tree):\n",
    "    \n",
    "    def __init__(self, max_depth: int = None, min_leaf_size: int = None, criterion: str = 'gini'):\n",
    "        super().__init__(criterion = Criterion(), max_depth=max_depth, min_leaf_size=min_leaf_size)\n",
    "        if criterion not in ['gini', 'entropy']:\n",
    "            raise NotImplementedError\n",
    "        self.criterion = criterion\n",
    "        self.n_classes = None\n",
    "        \n",
    "    def fit(self, X, y):\n",
    "        self.n_classes = np.unique(y).shape[0]\n",
    "        if self.criterion == 'gini':\n",
    "            self.root.criterion = GiniCriterion(self.n_classes)\n",
    "        elif self.criterion == 'entropy':\n",
    "            self.root.criterion = EntropyCriterion(self.n_classes)\n",
    "        self.build_tree(X, y)\n",
    "        return self\n",
    "    \n",
    "    def predict_proba(self, X):\n",
    "        preds = np.zeros(shape=(X.shape[0], self.n_classes))\n",
    "        self._predict(self.root, X, preds, np.arange(X.shape[0]))\n",
    "        return preds\n",
    "    \n",
    "    def predict(self, X):\n",
    "        preds = self.predict_proba(X)\n",
    "        return np.argmax(preds, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6faa215d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class RegressionTree(Tree):\n",
    "    \n",
    "    def __init__(self, max_depth: int = None, min_leaf_size: int = None, criterion: str = 'mse'):\n",
    "        super().__init__(criterion = Criterion(), max_depth=max_depth, min_leaf_size=min_leaf_size)\n",
    "        if criterion not in ['mse']:\n",
    "            raise NotImplementedError\n",
    "        self.criterion = criterion\n",
    "        self.n_classes = None\n",
    "        \n",
    "    def fit(self, X, y):\n",
    "        self.n_classes = np.unique(y).shape[0]\n",
    "        if self.criterion == 'mse':\n",
    "            self.root.criterion = MSECriterion(self.n_classes)\n",
    "        self.build_tree(X, y)\n",
    "        return self\n",
    "    \n",
    "    def predict(self, X):\n",
    "        preds = np.zeros(shape=(X.shape[0]))\n",
    "        self._predict(self.root, X, preds, np.arange(X.shape[0]))\n",
    "        return preds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2764cff",
   "metadata": {},
   "source": [
    "## Helpers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "546f3949",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_decision_surface(clf, X, y, plot_step=0.2, cmap='Spectral', figsize=(10, 8)):\n",
    "    # Plot the decision boundary\n",
    "    plt.figure(figsize=figsize)\n",
    "    \n",
    "    n_classes = len(set(y))\n",
    "    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
    "    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
    "    xx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step),\n",
    "                         np.arange(y_min, y_max, plot_step))\n",
    "\n",
    "    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n",
    "    Z = Z.reshape(xx.shape)\n",
    "    cs = plt.contourf(xx, yy, Z, cmap=cmap, alpha=0.5)    \n",
    "    y_pred = clf.predict(X)\n",
    "\n",
    "    # Plot the training points\n",
    "    plt.scatter(*X[y_pred == y].T, marker='.', s=70,\n",
    "                c=y[y_pred == y], cmap=cmap, alpha=0.9, label='correct')\n",
    "    plt.scatter(*X[y_pred != y].T, marker='x', s=50,\n",
    "                c=y[y_pred != y], cmap=cmap, label='errors')\n",
    "    plt.xlabel('X')\n",
    "    plt.ylabel('Y')\n",
    "    plt.axis(\"tight\")\n",
    "    plt.legend(loc='best')\n",
    "    print(\"Accuracy =\", accuracy_score(y, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "04e462bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_regression(clf, X, y, cmap='Spectral', figsize=(10, 8)):\n",
    "    plt.figure(figsize=figsize)\n",
    "    t = np.arange(-3, 3, 0.1).reshape(-1,1)\n",
    "    y_pred = clf.predict(t)\n",
    "    plt.scatter(X, y)\n",
    "    plt.plot(t, y_pred, color='red')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7c1e024",
   "metadata": {},
   "source": [
    "## Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f584b3c",
   "metadata": {},
   "source": [
    "### Clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "66e8eb5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 1.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y = make_blobs(n_samples=300, n_features=2, cluster_std=1.5, centers=2, random_state=23)\n",
    "tree = ClassificationTree(criterion='entropy', max_depth=6)\n",
    "tree.fit(X, y)\n",
    "plot_decision_surface(tree, X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7f966f78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 0.8466666666666667\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y = make_blobs(n_samples=300, n_features=2, cluster_std=2, centers=5, random_state=23)\n",
    "tree = ClassificationTree(criterion='gini', max_depth=6, min_leaf_size=10)\n",
    "tree.fit(X, y)\n",
    "plot_decision_surface(tree, X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "972904dc",
   "metadata": {},
   "source": [
    "### Circles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f220ba46",
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = make_circles(300, factor=.1, noise=.3, random_state=23)\n",
    "tree = ClassificationTree(criterion='entropy', min_leaf_size=10)\n",
    "tree.fit(X, y)\n",
    "plot_decision_surface(tree, X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "692a0919",
   "metadata": {},
   "source": [
    "### Moons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8cd65dd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = make_moons(500, noise=0.3, random_state=23)\n",
    "tree = ClassificationTree(criterion='entropy', min_leaf_size=10)\n",
    "tree.fit(X, y)\n",
    "plot_decision_surface(tree, X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33a07956",
   "metadata": {},
   "source": [
    "## Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91310448",
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = make_regression(n_samples=100, n_features=1, random_state=42, noise = 5)\n",
    "tree = RegressionTree(min_leaf_size=10)\n",
    "tree.fit(X, y)\n",
    "plot_regression(tree, X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8548b16",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
